<?xml version="1.0"?>
<mavlink>
    <version>1</version>
    <dialect>0</dialect>
    <enums>
        <enum name="VTS_SYSTEM_TYPE">
            <description>Micro air vehicle / autopilot classes. This identifies the individual model.</description>
            <entry value="0" name="VTS_GENERIC_TIMER">
                <description>Generic timer module containing vrx</description>
            </entry>
            <entry name="VTS_RACE_ORGANIZER">
                <description>System controlling timer modules.</description>
            </entry>
        </enum>
        <enum name="VTS_STATE">
            <entry name="VTS_STATE_UNINIT">
                <description>Uninitialized system, state is unknown.</description>
            </entry>
            <entry name="VTS_STATE_BOOT">
                <description>System is booting up.</description>
            </entry>
            <entry name="VTS_STATE_CALIBRATING">
                <description>System is calibrating.</description>
            </entry>
            <entry name="VTS_STATE_ACTIVE">
                <description>System is active</description>
            </entry>
            <entry name="VTS_STATE_STANDBY">
                <description>System is on standby</description>
            </entry>
        </enum>
        <enum name="VTS_PARAM_TYPE">
            <description>Specifies the datatype of a VTSLink parameter.</description>
            <entry value="1" name="VTS_PARAM_TYPE_UINT8">
                <description>8-bit unsigned integer</description>
            </entry>
            <entry value="2" name="VTS_PARAM_TYPE_INT8">
                <description>8-bit signed integer</description>
            </entry>
            <entry value="3" name="VTS_PARAM_TYPE_UINT16">
                <description>16-bit unsigned integer</description>
            </entry>
            <entry value="4" name="VTS_PARAM_TYPE_INT16">
                <description>16-bit signed integer</description>
            </entry>
            <entry value="5" name="VTS_PARAM_TYPE_UINT32">
                <description>32-bit unsigned integer</description>
            </entry>
            <entry value="6" name="VTS_PARAM_TYPE_INT32">
                <description>32-bit signed integer</description>
            </entry>
            <entry value="7" name="VTS_PARAM_TYPE_UINT64">
                <description>64-bit unsigned integer</description>
            </entry>
            <entry value="8" name="VTS_PARAM_TYPE_INT64">
                <description>64-bit signed integer</description>
            </entry>
            <entry value="9" name="VTS_PARAM_TYPE_REAL32">
                <description>32-bit floating-point</description>
            </entry>
            <entry value="10" name="VTS_PARAM_TYPE_REAL64">
                <description>64-bit floating-point</description>
            </entry>
        </enum>
        <enum name="VTS_CMD">
            <description>Commands to be executed by system component.</description>
            <entry value="0" name="VTS_CMD_START_RACE_COUNTDOWN">
                <description>Start race count down</description>
                <param index="1">Seconds till start</param>
                <param index="2">Random hold off time</param>
                <param index="3">Unix start time (ms)</param>
                <param index="4">Empty</param>
                <param index="5">Empty</param>
                <param index="6">Empty</param>
                <param index="7">Empty</param>
            </entry>
            <entry value="1" name="VTS_CMD_START_CALIBRATION">
                <description>Start race count down</description>
                <param index="1">Empty</param>
                <param index="2">Empty</param>
                <param index="3">Empty</param>
                <param index="4">Empty</param>
                <param index="5">Empty</param>
                <param index="6">Empty</param>
                <param index="7">Empty</param>
            </entry>
            <entry value="2" name="VTS_CMD_SET_FREQUENCY">
                <description>Start race count down</description>
                <param index="1">Racer id</param>
                <param index="2">Frequency (MHz)</param>
                <param index="3">Empty</param>
                <param index="4">Empty</param>
                <param index="5">Empty</param>
                <param index="6">Empty</param>
                <param index="7">Empty</param>
            </entry>            
        </enum>
        <enum name="VTS_RESULT">
            <description>result from a racelink command</description>
            <entry value="0" name="VTS_RESULT_ACCEPTED">
                <description>Command ACCEPTED and EXECUTED</description>
            </entry>
            <entry value="1" name="VTS_RESULT_TEMPORARILY_REJECTED">
                <description>Command TEMPORARY REJECTED/DENIED</description>
            </entry>
            <entry value="2" name="VTS_RESULT_DENIED">
                <description>Command PERMANENTLY DENIED</description>
            </entry>
            <entry value="3" name="VTS_RESULT_UNSUPPORTED">
                <description>Command UNKNOWN/UNSUPPORTED</description>
            </entry>
            <entry value="4" name="VTS_RESULT_FAILED">
                <description>Command executed, but failed</description>
            </entry>
        </enum>        
    </enums>
    <messages>
        <message id="0" name="HEARTBEAT">
            <description>The heartbeat message shows that a system is present and responding.</description>
            <field type="uint8_t" name="type" enum="VTS_SYSTEM_TYPE">Type of system (timing unit, race organizer, etc)</field>
            <field type="uint8_t" name="state" enum="VTS_STATE">State of system defined by VTS_STATE enum</field>
            <field type="uint8_t_mavlink_version" name="mavlink_version">RaceLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version</field>
        </message>
        <message id="1" name="SYS_STATUS">
            <description>The general system state</description>
            <field type="uint16_t" name="voltage_battery" units="mv">Battery voltage in mV</field>
            <field type="uint16_t" name="load" units="d%">CPU load in percent (0%:0, 100%:1000)</field>
            <field type="uint16_t" name="drop_rate_comm" units="c%">Communication drops in percent, (0%: 0, 100%: 10'000), (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception)</field>
        </message>
        <message id="2" name="SYSTEM_TIME">
            <description>The system time is the time of the master clock, typically the computer clock of the main onboard computer.</description>
            <field type="uint64_t" name="time_unix_usec" units="us">Timestamp of the master clock in microseconds since UNIX epoch.</field>
            <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp of the component clock since boot time in milliseconds.</field>
        </message>
        <message id="20" name="PARAM_REQUEST_READ">
            <description>Request to read the onboard parameter with the param_id string id.</description>
            <field type="uint8_t" name="target_system">System ID</field>
            <field type="uint8_t" name="target_component">Component ID</field>
            <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
            <field type="int16_t" name="param_index">Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)</field>
        </message>
        <message id="21" name="PARAM_REQUEST_LIST">
            <description>Request all parameters of this component. After this request, all parameters are emitted.</description>
            <field type="uint8_t" name="target_system">System ID</field>
            <field type="uint8_t" name="target_component">Component ID</field>
        </message>
        <message id="22" name="PARAM_VALUE">
            <description>Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.</description>
            <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
            <field type="float" name="param_value">Onboard parameter value</field>
            <field type="uint8_t" name="param_type" enum="MAV_PARAM_TYPE">Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.</field>
            <field type="uint16_t" name="param_count">Total number of onboard parameters</field>
            <field type="uint16_t" name="param_index">Index of this onboard parameter</field>
        </message>
        <message id="23" name="PARAM_SET">
            <description>Set a parameter value TEMPORARILY to RAM. It will be reset to default on system reboot. Send the ACTION MAV_ACTION_STORAGE_WRITE to PERMANENTLY write the RAM contents to EEPROM. IMPORTANT: The receiving component should acknowledge the new parameter value by sending a param_value message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message.</description>
            <field type="uint8_t" name="target_system">System ID</field>
            <field type="uint8_t" name="target_component">Component ID</field>
            <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
            <field type="float" name="param_value">Onboard parameter value</field>
            <field type="uint8_t" name="param_type" enum="MAV_PARAM_TYPE">Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.</field>
        </message>        
        <message id="24" name="RACER_PASS">
            <field type="uint32_t" name="time_ms" units="ms">Timestamp (miliseconds since UNIX epoch or miliseconds since boot time)</field>
            <field type="uint8_t" name="racer_id">Racer number. (Assigned id of racer)</field>
            <field type="uint16_t" name="max_rssi">Maximum rssi value during pass</field>
        </message>
        <message id="25" name="RACER_LAP">
            <field type="uint32_t" name="time_ms" units="ms">Timestamp (miliseconds since UNIX epoch or miliseconds since boot time)</field>
            <field type="uint32_t" name="lap_time_ms" units="ms">Lap time in miliseconds</field>
            <field type="uint8_t" name="lap_number">Lap number since heat start</field>
            <field type="uint8_t" name="racer_id">Racer number. (Assigned id of racer)</field>
        </message>
        <message id="26" name="VRX_STATUS">
            <field type="uint8_t" name="vrx_id">Video rx module id. Should be same as assigned racer id</field>
            <field type="uint16_t" name="vrx_freq" units="MHz">Video rx module frequency. If unknown set to 0</field>
            <field type="uint16_t" name="rssi_raw">Raw rssi reading</field>
            <field type="uint16_t" name="rssi">Filtered rssi value</field> 
        </message>
        <message id="76" name="COMMAND_LONG">
            <description>Send a command with up to seven parameters to the VTS</description>
            <field type="uint8_t" name="target_system">System which should execute the command</field>
            <field type="uint8_t" name="target_component">Component which should execute the command, 0 for all components</field>
            <field type="uint16_t" name="command" enum="VTS_CMD">Command ID, as defined by VTS_CMD enum.</field>
            <field type="uint8_t" name="confirmation">0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)</field>
            <field type="float" name="param1">Parameter 1, as defined by VTS_CMD enum.</field>
            <field type="float" name="param2">Parameter 2, as defined by VTS_CMD enum.</field>
            <field type="float" name="param3">Parameter 3, as defined by VTS_CMD enum.</field>
            <field type="float" name="param4">Parameter 4, as defined by VTS_CMD enum.</field>
            <field type="float" name="param5">Parameter 5, as defined by VTS_CMD enum.</field>
            <field type="float" name="param6">Parameter 6, as defined by VTS_CMD enum.</field>
            <field type="float" name="param7">Parameter 7, as defined by VTS_CMD enum.</field>
        </message>
        <message id="77" name="COMMAND_ACK">
            <description>Report status of a command. Includes feedback whether the command was executed.</description>
            <field type="uint16_t" name="command" enum="VTS_CMD">Command ID, as defined by VTS_CMD enum.</field>
            <field type="uint8_t" name="result" enum="VTS_RESULT">See VTS_RESULT enum</field>
        </message>        
    </messages>
</mavlink>
